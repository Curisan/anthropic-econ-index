name: Docker Image CI/CD

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'

env:
  IMAGE_NAME: easy-id-photo-backend
  REGISTRY: crpi-f384ynye77ss24l5.cn-hangzhou.personal.cr.aliyuncs.com
  NAMESPACE: yezhijian

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"
      
    - name: Login to Aliyun Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_DOCKER_USERNAME }}
        password: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.date.outputs.date }}

    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # 登录到阿里云容器镜像服务
          docker login ${{ env.REGISTRY }} -u ${{ secrets.ALIYUN_DOCKER_USERNAME }} -p ${{ secrets.ALIYUN_DOCKER_PASSWORD }}
          
          # 拉取最新镜像
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          
          # 停止并删除旧容器（如果存在）
          docker stop easy-id-photo-backend || true
          docker rm easy-id-photo-backend || true
          
          # 确保数据目录存在
          mkdir -p /data/easy-id-photo/db
          
          # 启动新容器
          docker run -d \
            --name easy-id-photo-backend \
            -p 5000:5000 \
            -v /data/easy-id-photo/db:/data/db \
            --restart always \
            -e DB_TYPE=${{ secrets.DB_TYPE || 'sqlite' }} \
            -e DB_HOST=${{ secrets.DB_HOST || 'localhost' }} \
            -e DB_PORT=${{ secrets.DB_PORT || '3306' }} \
            -e DB_USER=${{ secrets.DB_USER || 'root' }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD || '' }} \
            -e DB_NAME=${{ secrets.DB_NAME || 'easy_id_photo' }} \
            -e WX_APP_ID=${{ secrets.WX_APP_ID || '' }} \
            -e WX_MCH_ID=${{ secrets.WX_MCH_ID || '' }} \
            -e WX_API_KEY=${{ secrets.WX_API_KEY || '' }} \
            -e WX_NOTIFY_URL=${{ secrets.WX_NOTIFY_URL || '' }} \
            -e ENV=${{ secrets.ENV || 'production' }} \
            -e DEBUG=False \
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          
          # 删除未使用的镜像
          docker image prune -f 